/* https://stackoverflow.com/questions/14226803/wait-5-seconds-before-executing-next-line */
const delay = ms => new Promise(res => setTimeout(res, ms));

/* function shows an info text about the update status of an ajax query */
function infoSaveSuccessfull(status = "failiure", errorMessage = "") {
	var statusClass = "";
	var text = "";
	
	switch (status) {
		case "success":
			statusClass = "showSuccess";
			text = "Speichern erfolgreich!";
			break;
		case "failiure":
		default:
			statusClass = "showFailiure";
			text = "Speichern hat nicht geklappt!";
			break;
	}

	let div = document.createElement("div");
    div.innerHTML = text;
    div.classList.add(statusClass);
    document.body.appendChild(div);

    setTimeout(function () {
        div.classList.add("hidden");
    }, 1000);

    setTimeout(function () {
        div.parentNode.removeChild(div);
    }, 2000);
}

function shortInfoStatus() {

}

class StatusInfo {
	constructor(infoType, text) {
		this.infoType = infoType;
		this.text = text;

		this.persistant = false;
	}
	
	setText(text) {
		this.text = text;
	}

	makeBoxPersistantOnFailure() {
		this.persistant = true;
	}

	showError() {
		// showFailiure
		let div = document.createElement("div");
		div.classList.add("showFailiure");
		div.classList.add("showFailiureW");
		document.body.appendChild(div);

		let infoText = document.createElement("div");
		infoText.classList.add("inline");
		infoText.innerHTML = "Ein Fehler ist aufgetreten.";

		const removeBtn = document.createElement("button");
		removeBtn.addEventListener("click", e => {
			this.infoHTML.parentNode.removeChild(this.infoHTML);
		});
		removeBtn.innerHTML = "x";
		removeBtn.classList.add("removeFailiureMessage");

		const copyContent = document.createElement("input");
		copyContent.value = this.text;
		copyContent.style.display = "none";

		const copyBtn = document.createElement("button");
		copyBtn.addEventListener("click", () => {
			copyContent.select();
			copyContent.setSelectionRange(0, 99999);
			navigator.clipboard.writeText(copyContent.value);
		});
		copyBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="15px" height="15px" fill="white"><title>content-copy</title><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>`;
		copyBtn.classList.add("copyBtn");
		

		div.appendChild(removeBtn);
		div.appendChild(copyContent);
		div.appendChild(copyBtn);
		div.appendChild(infoText);

		this.infoHTML = div;
		this.infoText = infoText;
	}

	show() {
		let div = document.createElement("div");
		div.classList.add("showSuccess");
		document.body.appendChild(div);

		let infoText = document.createElement("div");
		infoText.classList.add("inline");
		infoText.innerHTML = this.text;

		let loader = document.createElement("div");
		loader.classList.add("inline");
		loader.classList.add("loaderSettings");
		loader.innerHTML = `<div class="loaderOrSymbol">
		<div class="lds-ring"><div></div><div></div><div></div><div></div></div>`;

		div.appendChild(loader);
		div.appendChild(infoText);

		this.infoHTML = div;
		this.infoText = infoText;
		this.loader = loader;
	}

	statusUpdate(text) {
		this.text = text;
		this.infoText.innerHTML = this.text;
		this.loader.innerHTML = "✓";
	}

	async hide(wait = 1000) {
		await delay(wait);
		this.infoHTML.classList.add("hidden");
	
		await delay(wait + 1000);
		this.infoHTML.parentNode.removeChild(this.infoHTML);
	}
}

/**
 * StatusInfoHandler is used to show the user the status of ajax requests,
 * class was generated by ChatGPT by giving it my requirements and the old statusInfo code
 */
class StatusInfoHandler {
  constructor() {
    this.persistant = false;
    this.infoHTML = null;
    this.infoText = null;
    this.loader = null;
  }

  static shortInfoStatus(status, errorMessage) {
    const infoHandler = new StatusInfoHandler();
    infoHandler.showInfo(status, errorMessage);
    return infoHandler;
  }

  showInfo(status = "failure", errorMessage = "") {
    let statusClass = "";
    let text = "";

    switch (status) {
      case "success":
        statusClass = "showSuccess";
        text = "Speichern erfolgreich!";
        break;
      case "failure":
      default:
        statusClass = "showFailure";
        text = "Speichern hat nicht geklappt!";
        break;
    }

    let div = document.createElement("div");
    div.innerHTML = text;
    div.classList.add(statusClass);
    document.body.appendChild(div);

    setTimeout(() => {
      div.classList.add("hidden");
    }, 1000);

    setTimeout(() => {
      div.parentNode.removeChild(div);
    }, 2000);
  }

  showError() {
    let div = document.createElement("div");
    div.classList.add("showFailure");
    div.classList.add("showFailureW");
    document.body.appendChild(div);

    let infoText = document.createElement("div");
    infoText.classList.add("inline");
    infoText.innerHTML = "Ein Fehler ist aufgetreten.";

    const removeBtn = document.createElement("button");
    removeBtn.addEventListener("click", e => {
      this.infoHTML.parentNode.removeChild(this.infoHTML);
    });
    removeBtn.innerHTML = "x";
    removeBtn.classList.add("removeFailureMessage");

    const copyContent = document.createElement("input");
    copyContent.value = this.text;
    copyContent.style.display = "none";

    const copyBtn = document.createElement("button");
    copyBtn.addEventListener("click", () => {
      copyContent.select();
      copyContent.setSelectionRange(0, 99999);
      navigator.clipboard.writeText(copyContent.value);
    });
    copyBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="15px" height="15px" fill="white"><title>content-copy</title><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>`;
    copyBtn.classList.add("copyBtn");

    div.appendChild(removeBtn);
    div.appendChild(copyContent);
    div.appendChild(copyBtn);
    div.appendChild(infoText);

    this.infoHTML = div;
    this.infoText = infoText;
  }

  show() {
    let div = document.createElement("div");
    div.classList.add("showSuccess");
    document.body.appendChild(div);

    let infoText = document.createElement("div");
    infoText.classList.add("inline");
    infoText.innerHTML = this.text;

    let loader = document.createElement("div");
    loader.classList.add("inline");
    loader.classList.add("loaderSettings");
    loader.innerHTML = `<div class="loaderOrSymbol">
		<div class="lds-ring"><div></div><div></div><div></div><div></div></div>`;

    div.appendChild(loader);
    div.appendChild(infoText);

    this.infoHTML = div;
    this.infoText = infoText;
    this.loader = loader;
  }

  statusUpdate(text) {
    this.text = text;
    this.infoText.innerHTML = this.text;
    this.loader.innerHTML = "✓";
  }

  async hide(wait = 1000) {
    await delay(wait);
    this.infoHTML.classList.add("hidden");

    await delay(wait + 1000);
    this.infoHTML.parentNode.removeChild(this.infoHTML);
  }
}

function testInfo() {
    const infoHandler = new StatusInfoHandler();
    //infoHandler.show(); // Show the info box

    // Example AJAX request
    ajax.post({
        r: "testString",
    }).then(response => {
        infoHandler.statusUpdate("Request successful!"); // Update the status message
        infoHandler.hide(2000); // Hide the info box after 2 seconds
    }).catch(error => {
        infoHandler.statusUpdate("Request failed!"); // Update the status message
        infoHandler.hide(2000); // Hide the info box after 2 seconds
    });
}
